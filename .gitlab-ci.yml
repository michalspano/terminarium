# Entry point for GitLab CI for terminarium-web

# Variables are defined in the following order:
variables:
  SRC_PATH: src/web/terminarium-web

# Define the docker image to use for the jobs - node:alpine
image: node:alpine

# Define the cache to use for the jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .npm

# The stages are the following:
#   1. install-job: Install all the dependencies for the npm pr
#   2. lint-job: Lint the project - catch syntax errors and bad practices
#   3. test-job: Test the project - run the unit tests
#   4. build-job: Build the project
#   5. TODO
stages:
  - install
  - lint
  - test
  - build

# Define the image to use for the jobs
before_script:
    - cd $SRC_PATH                          # Navigate to the source code (package-lock.json file is required)
    - npm ci --cache .npm                   # Install the dependencies from the package-lock.json file
    - apk add --no-cache bash git           # Install bash and git

# Job 1. Install the dependencies
install-job:
  stage: install
  tags: 
    - docker
  script:
    - echo "Installing dependencies..."       # Print a message
    - npm install                             # Install the dependencies
    - echo "Dependencies installed!"          # Print a message

# Job 2. Lint the project
lint-job:
  stage: lint
  tags:
    - docker
  script:
    - echo "Linting the project..."           # Print a message
    - npm run lint                            # Lint the project
    - echo "Project linted!"                  # Print a message

# Job 3. Test the project
test-job:
  stage: test
  tags: 
    - docker
  script:
    - echo "Testing the project..."           # Print a message
    - npm run test:unit                       # Test the project (via unit tests)
    - echo "Project tested!"                  # Print a message

# Job 4. Build the project
build-job:
  stage: build
  tags: 
    - docker
  script:
    - echo "Building the project..."          # Print a message
    - npm run build                           # Build the project
    - echo "Project built!"                   # Print a message
  artifacts:
    paths:
      - $SRC_PATH/dist                        # Save the build folder as an artifact
